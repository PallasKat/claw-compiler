#!/bin/bash

# This file is released under terms of BSD license
# See LICENSE file for more information

###
### clawfc
### Compiler driver for the claw language translation for Fortran language.
### This driver is based on the xmpf90 compiler driver from the OMNI Compiler
### project.
### https://github.com/omni-compiler/omni-compiler/blob/master/Driver/bin/xmpf90.in
###

## TODO cp original file in case of error

### Read configration file and library ###
OM_CX2X_DRIVER_CONF_DIR=@OM_CX2X_DRIVER_CONF_DIR@
OM_CX2X_DRIVER_LIB_DIR=@OM_CX2X_DRIVER_LIB_DIR@
. ${OM_CX2X_DRIVER_CONF_DIR}/@CLAW_CONF_FILE@
. ${OMNI_DRIVER_DIR}/omni_common_lib.sh
. ${OM_CX2X_DRIVER_LIB_DIR}@CLAW_LIB_SH@

### Directory for saving intermediate files ###
PID=$$
TEMP_DIR=/tmp/__omni_tmp__${PID}
DEBUG_TEMP_DIR="__omni_tmp__"

### Default options ###
FPP_REDIRECT=@FPP_REDIRECT@
ENABLE_LINKER=false
ONLY_PP=false
ENABLE_CPP=true
VERBOSE=false
ENABLE_DEBUG=false
OUTPUT_TEMPORAL=true
RESOLVE_DEPENDENCIES=true
DRY_RUN=false
STOP_PP=false
STOP_FRONTEND=false
STOP_TRANSLATOR=false
STOP_BACKEND=false
STOP_COMPILE=false
STOP_DEPENDENCIES=false
FORCE_TRANSLATION=false
LIST_TARGET=false
LIST_DIRECTIVE=false
SHOW_CONFIG=false
TARGET=false
CONFIG=false
DIRECTIVE=false
LINE_DIRECTIVE=false
MAX_COLUMN=false
DUMP_CX2X_ARGS=false
FORCE_PURE=false

### Set options ###
# e.g.) clawfc -I/usr/lib myfile.f90
#
#  output_file="a.out"           # Output file
#  f_files="a.f b.F c.f90 d.F90" # All fortran files
#  archive_files="lib.a"         # Archive files
#  obj_files="e.o"               # Object files
#  other_args="-I/usr/lib"       # Options for Preprocessor, Compiler, and
#                                # Linker
#
# To deal with space-separator in options, the following variables are defined
# as an array
#

output_file=()
output_dir=()
f_files=()
f_files_transformation=()
archive_files=()
obj_files=()
other_args=()

# Additional options defined by command line (e.g. --Wl..)
pp_add_opt=()
frontend_add_opt=()
xcode_translator_add_opt=()
native_add_opt=()
backend_add_opt=()
linker_add_opt=()
module_opt=()
trans_module_opt=()
include_opt=()

# CLAW special options
target_opt=()
config_opt=()
directive_opt=()
max_columns=()

claw_f_set_parameters ${@+"$@"}

### List target ###
if [ $LIST_TARGET = true ]
then
  omni_exec $OMNI_FX2X_CMD $OMNI_FX2X_OPT --target-list
  exit 0
fi

### List directive ###
if [ $LIST_DIRECTIVE = true ]
then
  omni_exec $OMNI_FX2X_CMD $OMNI_FX2X_OPT --directive-list
  exit 0
fi

### Set correct configuration file info ###
if [ $CONFIG = true ]
then
  OMNI_CX2X_CONFIG_OPT="--config=$config_opt --schema=$OMNI_CX2X_CONFIG_XSD"
else
  OMNI_CX2X_CONFIG_OPT="--config=$OMNI_CX2X_CONFIG_DEFAULT --schema=$OMNI_CX2X_CONFIG_XSD"
fi

# Set the correct target option for the translator
OMNI_CX2X_TARGET_OPT=""
if [ $TARGET = true ]
then
  OMNI_CX2X_TARGET_OPT="--target=$target_opt"
fi

# Set the correct directive option for the translator
OMNI_CX2X_DIRECTIVE_OPT=""
if [ $DIRECTIVE = true ]
then
  OMNI_CX2X_DIRECTIVE_OPT="--directive=$directive_opt"
fi

# Set the correct column option for the decompiler
OMNI_CX2X_MAX_COLUMN_OPT=""
if [ $MAX_COLUMN = true ]
then
  OMNI_CX2X_MAX_COLUMN_OPT="-w $max_columns"
else
  OMNI_CX2X_MAX_COLUMN_OPT="-w 80"
fi

# Set the correct line directive option for the decompiler
OMNI_CX2X_LINE_OPT="-l"
if [ $LINE_DIRECTIVE = true ]
then
  OMNI_CX2X_LINE_OPT=""
fi

if [ $FORCE_PURE = true ]
then
  TRANSLATOR_OPTION="$TRANSLATOR_OPTION --force-pure"
  echo "OPTION: >>>>> $TRANSLATOR_OPTION"
fi

# Module search path option
OMNI_CX2X_MOD_OPT=""
if [ ${#module_opt[@]} -ne 0 ]
then
  for mod in "${module_opt[@]}"
  do
    OMNI_CX2X_MOD_OPT="$OMNI_CX2X_MOD_OPT $mod"
  done
fi

### Show config ###
if [ $SHOW_CONFIG = true ]
then
  omni_exec $OMNI_FX2X_CMD $OMNI_FX2X_OPT --show-config $OMNI_CX2X_CONFIG_OPT
  exit 0
fi

omni_f_check_file_exist

## Check if multiple file, output_dir must be specified and output_file not
if [ ${#f_files[@]} -gt 1 ] && [ ${#output_dir[@]} = 0 ]
then
  # Error: multiple files without output directory specified
  echo "Error: output directory not specified"
  exit 1
elif [ ${#output_file[@]} != 0 ] && [ ${#output_dir[@]} != 0 ]
then
  # Error: output file and output directory defined at the same time
  echo "Error: output directory and output file cannot be specified together"
  exit 1
fi



### Create temporal directory ###
[ $ENABLE_DEBUG = true ] && TEMP_DIR=$DEBUG_TEMP_DIR
# Note that, if TEMP_DIR exists, the TEMP_DIR is not deleted (KAGEMAI #379)

omni_exec mkdir -p $TEMP_DIR
[ $VERBOSE = true ] && echo "Create ${TEMP_DIR}/"

### Clean temporal directory before exit ###
omni_set_trap

### Bypass file without code transformation ###
for file in "${f_files[@]}"
do
  FILE=("${file}")
  if ! [ $FORCE_TRANSLATION == true ]
  then
    NUM_DIRECTIVES=$(grep --count --ignore-case "!\$claw" "${FILE}")
    if [ "$NUM_DIRECTIVES" = "0" ]
    then
      echo "Warning: file ${FILE} does not contains \$claw. Skip ..."
      if [ "${#output_dir}" != "0" ]
      then
        cp ${FILE} ${output_dir}/${FILE}
      else
        cp ${FILE} ${output_file}
      fi
    else
      f_files_transformation+=("${FILE}")
    fi
  else
    f_files_transformation+=("${FILE}")
  fi
done


### TODO check if f_files_transformation has any files in ...


### Preprocessor ###
[ $ONLY_PP = true -a -f "${output_file}" ] && omni_exec rm "${output_file}"
[ $ENABLE_CPP = true ] && OMNI_FPP_OPT="$OMNI_FPP_OPT $CPP_OPT"
for file in "${f_files_transformation[@]}"
do
  [ $VERBOSE = true ] && echo "Prepocessing ..."
  FILE=("${file}")
  BASENAME=$(basename ${FILE%.*})
  FILE_NAME=$(omni_f_norm_file_name "${FILE}")
  EXT=${file##*.}
  FILE_PP=${TEMP_DIR}/"${FILE_NAME}".${EXT}

  if [ $EXT = "F90" -o $EXT = "F" -o $ENABLE_CPP = true ]
  then
    # When ">" or ">>" is used, please use "omni_exec_echo" and "omni_exec_run"
    # instead of "omni_exec"
    if [ $FPP_REDIRECT == true ]
    then
      omni_exec_echo $OMNI_FPP_CMD "${include_opt[@]}" "${pp_add_opt[@]}" \
        $OMNI_FPP_OPT "${other_args[@]}" "${FILE}" ">" "${FILE_PP}"
      omni_exec_run  $OMNI_FPP_CMD "${include_opt[@]}" "${pp_add_opt[@]}" \
        $OMNI_FPP_OPT "${other_args[@]}" "${FILE}" > "${FILE_PP}"
    else
      omni_exec_echo $OMNI_FPP_CMD "${include_opt[@]}" "${pp_add_opt[@]}" \
        $OMNI_FPP_OPT "${other_args[@]}" "${FILE}"
      omni_exec_run  $OMNI_FPP_CMD "${include_opt[@]}" "${pp_add_opt[@]}" \
        $OMNI_FPP_OPT "${other_args[@]}" "${FILE}"
      mv "${BASENAME}.i" "${FILE_PP}"
    fi

    if [ $ONLY_PP = true ]; then
      if [ "${output_file}" = "" ]; then
        omni_exec cat "${FILE_PP}"
      else
        omni_exec_echo cat "${FILE_PP_I}" ">>" "${output_file}"
        omni_exec_run  cat "${FILE_PP_I}" >> "${output_file}"
      fi
    fi
  fi
done
[ $STOP_PP = true ] && exit 0;
[ $ONLY_PP = true -a $ENABLE_DEBUG = true ] && exit 0;
[ $ONLY_PP = true ] && { omni_exec rm -rf $TEMP_DIR; exit 0; }

### Apply ignore directive
for file in "${f_files_transformation[@]}"; do
  FILE=("${file}")
  FILE_NAME=$(omni_f_norm_file_name "${FILE}")
  EXT=${file##*.}
  if [ $EXT = "F90" -o $EXT = "F" -o $ENABLE_CPP = true ]; then
    FILE_PP=${TEMP_DIR}/"${FILE_NAME}".${EXT}
  else
    FILE_PP="${FILE}"
  fi
  applyIgnore $FILE_PP
done

### dependencies resolution ###
if [ $RESOLVE_DEPENDENCIES ]
then
  for file in "${f_files_transformation[@]}"
  do
    [ $VERBOSE = true ] && echo "Dependencies resolution ..."
    FILE=("${file}")
    FILE_NAME=$(omni_f_norm_file_name "${FILE}")
    EXT=${file##*.}

    if [ $EXT = "F90" -o $EXT = "F" -o $ENABLE_CPP = true ]; then
      FILE_PP=${TEMP_DIR}/"${FILE_NAME}".${EXT}
    else
      FILE_PP="${FILE}"
    fi

    claw_f_process_dependencies $FILE_PP ${file}
  done
  [ $STOP_DEPENDENCIES = true ] && exit 0;
fi

### Frontend ###
for file in "${f_files_transformation[@]}"; do
  [ $VERBOSE = true ] && echo "Fortran to XcodeML ..."
  FILE=("${file}")
  FILE_NAME=$(omni_f_norm_file_name "${FILE}")
  EXT=${file##*.}

  if [ $EXT = "F90" -o $EXT = "F" -o $ENABLE_CPP = true ]; then
    FILE_PP=${TEMP_DIR}/"${FILE_NAME}".${EXT}
  else
    FILE_PP="${FILE}"
  fi
  FILE_IN_X=${TEMP_DIR}/"${FILE_NAME}"_${EXT}_in.xml

  # Call F_Front with the correct arguments
  omni_exec $OMNI_F2X_CMD "${include_opt[@]}" "${module_opt[@]}" \
    "${frontend_add_opt[@]}" $OMNI_F2X_OPT "${FILE_PP}" -o "${FILE_IN_X}"

done
[ $STOP_FRONTEND = true ] && exit 0;

if [ $ENABLE_DEBUG = true ]
then
  TRANSLATOR_OPTION="$TRANSLATOR_OPTION -d"
fi

### Translator ###
for file in "${f_files_transformation[@]}"; do
  [ $VERBOSE = true ] && echo "XcodeML to XcodeML translation ..."
  FILE=("${file}")
  FILE_NAME=$(omni_f_norm_file_name "${FILE}")
  EXT=${file##*.}
  FILE_IN_X=${TEMP_DIR}/"${FILE_NAME}"_${EXT}_in.xml
  FILE_OUT_X=${TEMP_DIR}/"${FILE_NAME}"_${EXT}_out.xml
  FILE_OUT_F=${TEMP_DIR}/"${FILE}"
  if [ "${#output_file}" != "0" ]
  then
    FILE_OUT_F=${output_file}
  elif [ "${#output_dir}" != "0" ]
  then
    FILE_OUT_F=${output_dir}/${FILE}
  fi

  # Dump the arguments pass to the translator for easier debugging
  if [ $DUMP_CX2X_ARGS = true ]
  then
    echo "-- [DEBUG] Arguments for omni-cx2x:"
    echo '$TRANSLATOR_OPTION $OMNI_CX2X_TARGET_OPT $OMNI_CX2X_DIRECTIVE_OPT' \
      '$OMNI_CX2X_CONFIG_OPT $OMNI_CX2X_MAX_COLUMN_OPT $OMNI_CX2X_LINE_OPT' \
      '${xcode_translator_add_opt[@]} ${module_opt[@]} ${trans_module_opt[@]}' \
      '-o $(PWD)/${FILE_OUT_X} -f $(PWD)/${FILE_OUT_F} $(PWD)/${FILE_IN_X}'
  fi

  omni_exec $OMNI_FX2X_CMD $OMNI_FX2X_OPT $TRANSLATOR_OPTION \
    $OMNI_CX2X_TARGET_OPT $OMNI_CX2X_DIRECTIVE_OPT $OMNI_CX2X_CONFIG_OPT \
    $OMNI_CX2X_MAX_COLUMN_OPT $OMNI_CX2X_LINE_OPT \
    "${xcode_translator_add_opt[@]}" "${module_opt[@]}" \
    "${trans_module_opt[@]}" -o ${FILE_OUT_X} -f ${FILE_OUT_F} \
    ${FILE_IN_X}

  # also create ${TEMP_DIR}/${FILE_NAME}_${EXT}_in.F90
  # Note : The BlueGene/Q 's mpi compiler can compile only *.F90 in XMP process.
  # So that remains .F90 extention after process of the native compilier.
done
[ $STOP_TRANSLATOR = true ] && exit 0;

### Revert ignore prefix and apply verbatim
for file in "${f_files_transformation[@]}"; do
  FILE=("${file}")
  if [ "${#output_file}" != "0" ]
  then
    FILE_OUT_F=${output_file}
  elif [ "${#output_dir}" != "0" ]
  then
    FILE_OUT_F=${output_dir}/${FILE}
  fi
  revertIgnore "$FILE_OUT_F"
  applyVerbatim "$FILE_OUT_F"
done

### Delete temporal directory ###
[ $ENABLE_DEBUG = false ] && omni_exec rm -rf $TEMP_DIR

exit 0
